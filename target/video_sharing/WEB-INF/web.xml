<?xml version="1.0" encoding="UTF-8"?>

<web-app metadata-complete="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">
  
  <display-name>video_sharing</display-name>

	<!-- 读取Resource下spring*.xml 配置文件 -->
	<context-param>
	    <param-name>contextConfigLocation</param-name>
	    <param-value>
	    		classpath:springContext.xml
	    		classpath:spring-security.xml
<!-- 	    		classpath:spring-quartz.xml -->
	    </param-value>
	</context-param>
	
	<!--  Ajax请求Session超时处理 -->
<!-- 	<filter>   -->
<!-- 	    <filter-name>ajaxSessionTimeout</filter-name> -->
<!-- 	    <filter-class>com.zhlt.business.union.common.util.filter.AjaxSessionTimeoutFilter</filter-class> -->
<!-- 	</filter> -->
<!-- 	<filter-mapping> -->
<!-- 	    <filter-name>ajaxSessionTimeout</filter-name> -->
<!-- 	    <url-pattern>*.do</url-pattern> -->
<!-- 	</filter-mapping> -->
    
	
	<!-- XSS攻击过滤 -->
	<filter>
        <filter-name>XssSqlFilter</filter-name>
        <filter-class>com.pwx.video_sharing.common.util.filter.XSSFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>XssSqlFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>

	<!-- ====Start	配置SpringSecurity==== -->  
	<filter>
        <filter-name>localizationFilter</filter-name>
        <filter-class>org.springframework.web.filter.RequestContextFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>localizationFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- ====END  配置SpringSecurity==== -->
	

	<!-- ====Start  Spring MVC配置==== -->
	
	<servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
	      <param-name>contextConfigLocation</param-name>
	      <param-value>classpath:spring-mvc.xml</param-value><!-- 读取Resource下 spring-* 配置文件 -->
	    </init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<!-- 拦截所有.do的请求 -->
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	
	<listener>
    	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  	</listener>
  	
  	<listener>
    	<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  	</listener>
  	<!-- 监听 RequestContextListener-->
  	<listener>
		<listener-class>  
            org.springframework.web.context.request.RequestContextListener  
        </listener-class>  
	</listener>
  
  	<welcome-file-list>
    	<welcome-file>index.jsp</welcome-file>
  	</welcome-file-list>
	<!-- ====END  Spring MVC配置==== -->
	
	
	<!-- ====Start 《编码转换》    相关配置使用拦截器配置==== -->
   	<filter>
   		<filter-name>encodingFilter</filter-name>
    	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	   	<init-param>
	      <param-name>encoding</param-name>
	      <param-value>UTF-8</param-value>
	    </init-param>
  	</filter>
  	<filter-mapping>
	    <filter-name>encodingFilter</filter-name>
	    <url-pattern>/*</url-pattern>
  	</filter-mapping>
	<!-- ====END相关配置使用拦截器配置=== 
		<init-param>    
            <param-name>forceEncoding</param-name>    
            <param-value>true</param-value>    
        </init-param> 
	-->
	
	
	
	<!-- ====Start日志配置==== -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>60000</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<!-- 根目录 -->
	<context-param>  
    	<param-name>webAppRootKey</param-name>  
    	<param-value>businessUnionWebApp.root</param-value>  
	</context-param> 
	<!-- ====END日志配置=== -->
  	
  	<!-- 404无效路劲页面配置 -->
  	<error-page>  
	    <error-code>404</error-code>  
	    <location>/login/loginPage.jsp</location>  
	</error-page>
	
	
	<!-- sitemesh模板配置 -->
	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>org.sitemesh.config.ConfigurableSiteMeshFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- openSessionVie session控制配置 -->
	<!--
		指定org.springframework.orm.hibernate3.LocalSessionFactoryBean在spring配置文件中的名称,默认值为sessionFactory
		     如果LocalSessionFactoryBean在spring中的名称不是sessionFactory,该参数一定要指定,否则会出现找不到sessionFactory的例外
	-->
	<filter>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <filter-class>com.pwx.video_sharing.common.util.openSessionInViewFilter</filter-class>
        <init-param>
	        <param-name>flushMode</param-name>
	   		<param-value>AUTO </param-value>        
        </init-param> 
    </filter>
    
    <filter-mapping>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <url-pattern>*.do</url-pattern>
    </filter-mapping>
    <filter-mapping>  
        <filter-name>OpenSessionInViewFilter</filter-name>  
        <url-pattern>/j_spring_security_check</url-pattern>  
    </filter-mapping> 
	
	<!-- sessionManager管理 -->
	<listener>
		<listener-class> 
	    	org.springframework.security.web.session.HttpSessionEventPublisher  
	  	</listener-class>
	</listener>	
	<!-- session有效期为30分 -->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>
    
    
    <!-- 数据字典加载 -->
	<listener>
		<description>InitDictionary</description>
		<listener-class>com.pwx.video_sharing.common.util.DictionaryCacheListener</listener-class>
	</listener>
	
	<!-- <listener>
		<description>initToken</description>
		<listener-class>com.zhlt.business.union.wxservice.popular.support.TokenManager</listener-class>
	</listener> -->
	
	<!-- 验证码 -->
	<servlet>
		<servlet-name>VerifyCodeServlet</servlet-name>
		<servlet-class>com.pwx.video_sharing.common.VerifyCodeImg.controller.VerifyCodeServlet</servlet-class>
	 	<init-param>
            <param-name>width</param-name>
            <param-value>200</param-value>
        </init-param>
        <init-param>
            <param-name>height</param-name>
            <param-value>50</param-value>
        </init-param>
        <init-param>
            <param-name>codeCount</param-name>
            <param-value>4</param-value>
        </init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>VerifyCodeServlet</servlet-name>
		<url-pattern>/verifyCode.jpeg</url-pattern> 
	</servlet-mapping>


	<servlet>
		<servlet-name>ResultServlet</servlet-name>
		<servlet-class>com.pwx.video_sharing.common.VerifyCodeImg.controller.ResultServlet</servlet-class>
	</servlet>
	<servlet-mapping>   
		<servlet-name>ResultServlet</servlet-name>
		<url-pattern>*.result</url-pattern>
	</servlet-mapping>
	
	
	<!-- Start	微信接入效验Servlet 
	<servlet>
		<servlet-name>coreServlet</servlet-name>
		<servlet-class>com.zhlt.business.union.cms.wxservice.servlet.CoreServlet</servlet-class>
	</servlet>-->
	<!-- 用于指定该Servlet的访问路劲
	<servlet-mapping>
		<servlet-name>coreServlet</servlet-name>
		<url-pattern>/coreServlet.do</url-pattern>
	</servlet-mapping> -->
	
	<welcome-file-list>
		<welcome-file>login/loginPage.jsp</welcome-file>
	</welcome-file-list>
  
</web-app>
