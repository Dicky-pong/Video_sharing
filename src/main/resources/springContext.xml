<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	 <!-- 当前Spring支持注解 -->
	 <context:annotation-config/>
	 
	 <!-- 设置当前项目的根包 -->
	 <context:component-scan base-package="com.pwx.video_sharing" />
	 
	 <!-- 启用定时器 -->
	 <task:annotation-driven scheduler="myScheduler" executor="myExecutor" mode="proxy"/>  
     <task:scheduler id="myScheduler" pool-size="10"/>  
	 <task:executor id="myExecutor" pool-size="10"/>
	 
	<context:property-placeholder location="classpath*:jdbc.properties" />
	<context:property-placeholder location="classpath*:log4j.properties" />
	 
	<!-- 配置数据源  //com.mchange.v2.c3p0.ComboPooledDataSource	 init-method="init"	org.apache.commons.dbcp.BasicDataSource	-->
	<bean id="dataSourceOne" class="org.apache.commons.dbcp.BasicDataSource"
		 destroy-method="close">
		
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<property name="initialSize" value="${jdbc.initialSize}"></property>
		<property name="maxActive" value="${jdbc.maxActive}"></property>
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
		<property name="minIdle" value="${jdbc.minIdle}"></property>
		<!-- 设置在自动回收超时连接的时候打印连接的超时错误    -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}"/>  
		<!-- 设置自动回收超时连接   -->
		<property name="removeAbandoned"  value="${jdbc.removeAbandoned}"/> 
		<!-- 自动回收超时时间(以秒数为单位)   -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/> 
		<!-- 超时等待时间以毫秒为单位    -->
		<property name="maxWait" value="${jdbc.maxWait}"/>
		<!-- 验证连接是否可用，使用的SQL语句 -->
		<property name="validationQuery" value="SELECT 1"></property>
		<!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
		<property name="testWhileIdle" value="true"></property>
		<!-- 借出连接时不要测试，否则很影响性能 -->
		<property name="testOnBorrow" value="false"></property>
		<!-- 每30秒运行一次空闲连接回收器 -->
		<property name="timeBetweenEvictionRunsMillis" value="30000"></property>
		<!-- 池中的连接空闲30分钟后被回收,默认值就是30分钟。 -->
		<property name="minEvictableIdleTimeMillis" value="1800000"></property>
		<!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量，默认值就是3. -->
<!-- 		<property name="validatinumTestsPerEvictionRunonQuery" value="3"></property>  -->
		 
		<!--连接池中保留的最小连接数。-->
		<!-- <property name="minPoolSize" value="10" />
		连接池中保留的最大连接数。Default: 15
		<property name="maxPoolSize" value="100" />
		最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0
		<property name="maxIdleTime" value="1800" />
		当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		每60秒检查所有连接池中的空闲连接。Default: 0
		<property name="idleConnectionTestPeriod" value="60" />
		定义在从数据库获取新连接失败后重复尝试的次数。Default: 30
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" /> -->
	</bean>
<!-- 	com.alibaba.druid.pool.DruidDataSource org.apache.commons.dbcp.BasicDataSource -->
	<bean id="dataSourceTwo" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		
		<property name="driverClassName" value="${Bjdbc.driverClassName}" />
		<property name="url" value="${Bjdbc.url}" />
		<property name="username" value="${Bjdbc.username}" />
		<property name="password" value="${Bjdbc.password}" />
		
		<property name="initialSize" value="${Bjdbc.initialSize}"></property>
		<property name="maxActive" value="${Bjdbc.maxActive}"></property>
		<property name="maxIdle" value="${Bjdbc.maxIdle}"></property>
		<property name="minIdle" value="${Bjdbc.minIdle}"></property>
		<!-- 设置在自动回收超时连接的时候打印连接的超时错误    -->
		<property name="logAbandoned" value="${Bjdbc.logAbandoned}"/>  
		<!-- 设置自动回收超时连接   -->
		<property name="removeAbandoned"  value="${Bjdbc.removeAbandoned}"/> 
		<!-- 自动回收超时时间(以秒数为单位)   -->
		<property name="removeAbandonedTimeout" value="${Bjdbc.removeAbandonedTimeout}"/> 
		<!-- 超时等待时间以毫秒为单位    -->
		<property name="maxWait" value="${Bjdbc.maxWait}"/>
		<!-- 验证连接是否可用，使用的SQL语句 -->
		<property name="validationQuery" value="SELECT 1"></property>
		<!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
		<property name="testWhileIdle" value="true"></property>
		<!-- 借出连接时不要测试，否则很影响性能 -->
		<property name="testOnBorrow" value="false"></property>
		<!-- 每30秒运行一次空闲连接回收器 -->
		<property name="timeBetweenEvictionRunsMillis" value="30000"></property>
		<!-- 池中的连接空闲30分钟后被回收,默认值就是30分钟。 -->
		<property name="minEvictableIdleTimeMillis" value="1800000"></property>

	</bean>
	
	<bean id="dynamicDataSource" class="com.pwx.video_sharing.common.util.datasource.DynamicDataSource">  
	    <property name="targetDataSources">  
	    	<map key-type="java.lang.String">
	            <!-- 指定lookupKey和与之对应的数据源 -->
	            <entry key="dataSourceOne" value-ref="dataSourceOne"></entry>  
	            <entry key="dataSourceTwo" value-ref="dataSourceTwo"></entry>  
	        </map>  
	    </property>  
	    <!-- 这里可以指定默认的数据源 -->
	    <property name="defaultTargetDataSource" ref="dataSourceOne" />  
	</bean>
	
	<!-- 配置session工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dynamicDataSource" />
		</property>
		
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">none</prop>
			</props>
		</property>
		
		<property name="packagesToScan">
			<list>
				<!-- 用于试验的实体类 -->
				<value>com.pwx.video_sharing.**.entity</value>
			</list>
		</property>
	</bean>
	
	<!-- 事务管理配置  -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">  
		<property name="sessionFactory">  
			<ref local="sessionFactory" />  
		</property>  
	</bean>
	
	
	<!-- 拦截器方式配置事物 -->
	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" />
			<tx:method name="save*" />
			<tx:method name="update*" />
			<tx:method name="modify*" />
			<tx:method name="edit*" />
			<tx:method name="delete*" />
			<tx:method name="remove*" />
			<tx:method name="repair" />
			<tx:method name="deleteAndRepair" />

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />

			<tx:method name="is*" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.zhlt.business.union.*.service..*impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config> -->
	<!-- 基于注释的事务，当注释中发现@Transactional时，使用id为“transactionManager”的事务管理器 
	如果没有设置transaction-manager的值，则spring以缺省默认的事务管理器来处理事务，默认事务管理器为第一个加载的事务管理器-->
    <tx:annotation-driven transaction-manager="transactionManager"/> 
	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<bean id="spring" class="com.pwx.video_sharing.common.util.SpringUtil" /> 
	
</beans>